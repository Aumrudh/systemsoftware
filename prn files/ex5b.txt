IMPLEMENTATION OF Relocation Loader using MODIFICATION RECORD

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main(){
    FILE *fin;char fn[12]={0};
    printf("Enter the File Name with Extension : ");
    scanf("%s",&fn);
    if((fin=fopen(fn,"r+"))==NULL){
        printf("File Cannot be Opened");
        return(-1);
    }
	int hex,hex1, length ,length1, i,ii, j, k, row=0, ans;
	char Head[22], Name[7], Len[6],Recd[81],Text[10][81], Adr[7]={0}, Adr1[7]={0}, Adr2[7]={0}, Leng[3]={0},Leng1[3]={0};
	fscanf(fin, "%[^\n]", Head);
	printf("Enter the Program Name    : ");
	scanf("%s",&Name);
    H^COPY   ^001000^00107A
	for(i=0; i<strlen(Name); i++){
		if(Name[i]!=Head[2+i]){
			printf("Name is Incorrect...");
			return(-1);
		}
	}
	printf("Enter the Length of pgm : ");
    scanf("%s",Len);
    for(i=0; i<strlen(Len); i++){
        if(Len[i]!=Head[17+i]){
            printf("Len is Incorrect...");
            return(-1);
        }
    }
    printf("Enter the Modification Address : ");
    scanf("%s",&Adr1);
	printf("Hex\tBinary\n");
A:	fscanf(fin,"%s",Recd);
	if(Recd[0]=='E'){
    //T^001000^1E^141033^482039^001036^281030^301015^482061^3C1003^00102A^0C1039^00102D
        for(ii=0; ii<row; ii++){
            for(i=0; i<6; i++){
                Adr[i]= Text[ii][i];
            }
            sscanf(Adr,"%X",&hex);
            sscanf(Adr1,"%X",&hex1);
            hex+=hex1;
            sprintf(Adr,"%X",hex);
            for(i=0; i<4; i++)
                Text[ii][2+i]=Adr[i];
            Leng[0]= Text[ii][6];
            Leng[1]= Text[ii][7];
            sscanf(Leng,"%X",&length);
            for(i=8; i<(length*2)+8; i+=2){
                printf("%X\t",(hex+0X0000));
                hex++;
                Leng[0]=Text[ii][i];
                Leng[1]=Text[ii][i+1];
                sscanf(Leng,"%X",&k);
                for(j=7; j>=0; j--){
                    ans= k>>j;
                    if(ans&1)
                        printf("1");
                    else
                        printf("0");
                }
                printf("\n");
            }
        }
        goto LAST;
	}
    else if(Recd[0]=='T'){
        k=0;
        char Recc[81]={0};
        for(i=2; i<strlen(Recd); i++){
            if(Recd[i]!='^'){
                Recc[k]=Recd[i];
                k++;
            }
        }
        strcpy(Text[row],Recc);
        row++;
    }
    else{
    //M^000001^04
        for(ii=0; ii<row; ii++){
            for(i=0; i<6; i++)
                Adr[i]= Recd[2+i];
            sscanf(Adr,"%X",&hex);
            int ind=hex;
            Leng1[0]= Recd[9];
            Leng1[1]= Recd[10];
            sscanf(Leng1,"%X",&length1);
            T^001000^1E^141033^482039^001036^281030^301015^482061^3C1003^00102A^0C1039^00102D
            for(i=0; i<4; i++){
                Adr2[i]= Text[ii][i];
            }            
            Adr2[i]='0';
            i++;
            Adr2[i]='0';
            i++;
            sscanf(Adr2,"%X",&hex1);
            int val=hex1;
            hex+=hex1;
            for(i=0; i<6; i++){
                Adr2[i]= Text[ii][i];
            }
            sscanf(Adr2,"%X",&hex1);
            int val1=hex1;
            Leng[0]= Text[ii][i];
            i++;
            Leng[1]= Text[ii][i];
            i++;
            sscanf(Leng,"%X",&length);
            hex1+=length;
            if(hex1>hex){
                k=0;
                char Addr[7]={0};
                int y=abs(((val1-val)-ind)*2)+8;
                for(i=y; i<(y+length1); i++){
                    Addr[k]=Text[ii][i];k++;
                }
                sscanf(Addr,"%X",&hex);
                sscanf(Adr1,"%X",&hex1);
                hex+=hex1;
                sprintf(Addr,"%X",hex);
                k=0;
                for(i=y; i<(y+length1); i++){
                    Text[ii][i]=Addr[k];k++;
                }
                ii=row;
            }
        }
    }
	goto A;
LAST:	return 0;
}

mrecord.txt

H^COPY   ^001000^00107A
T^001000^1E^141033^482039^001036^281030^301015^482061^3C1003^00102A^0C1039^00102D
T^00101E^15^0C1036^482061^081033^4C0000^454F46^000003^000000
T^002039^1E^041030^001030^E0205D^30203F^D8205D^281030^302057^541039^2C205E^38203F
T^002057^1C^101036^4C0000^F1^001000^041030^E02079^302064^501039^DC2079^2C1036
T^002073^07^382064^4C0000^05
M^000001^04
M^000004^04
M^000007^04
M^00000A^04
M^00000D^04
M^000010^04
M^000013^04
M^000016^04
M^000019^04
M^00001C^04
M^00001F^04
M^000022^04
M^000025^04
M^00003A^04
M^00003D^04
M^000040^04
M^000043^04
M^000046^04
M^000049^04
M^00004C^04
M^00004F^04
M^000052^04
M^000055^04
M^000058^04
M^000062^04
M^000065^04
M^000068^04
M^00006B^04
M^00006E^04
M^000071^04
M^000074^04
E^001000

output

Enter the File Name with Extension : mrecord.txt
Enter the Program Name    : COPY
Enter the Program Address : 00107A
Enter the Modification Address : 2000
Hex	Binary
3000	00010100
3001	00110000
3002	00110011
3003	01001000
3004	01000000
3005	00111001
3006	00000000
3007	00110000
3008	00110110
3009	00101000
300A	00110000
300B	00110000
300C	00110000
300D	00110000
300E	00010101
300F	01001000
3010	01000000
3011	01100001
3012	00111100
3013	00110000
3014	00000011
3015	00000000
3016	00110000
3017	00101010
3018	00001100
3019	00110000
301A	00111001
301B	00000000
301C	00110000
301D	00101101
301E	00001100
301F	00110000
3020	00110110
3021	01001000
3022	01000000
3023	01100001
3024	00001000
3025	00110000
3026	00110011
3027	01001100
3028	00000000
3029	00000000
302A	01000101
302B	01001111
302C	01000110
302D	00000000
302E	00000000
302F	00000011
3030	00000000
3031	00000000
3032	00000000
4039	00000100
403A	00110000
403B	00110000
403C	00000000
403D	00110000
403E	00110000
403F	11100000
4040	01000000
4041	01011101
4042	00110000
4043	01000000
4044	00111111
4045	11011000
4046	01000000
4047	01011101
4048	00101000
4049	00110000
404A	00110000
404B	00110000
404C	01000000
404D	01010111
404E	01010100
404F	00110000
4050	00111001
4051	00101100
4052	01000000
4053	01011110
4054	00111000
4055	01000000
4056	00111111
4057	00010000
4058	00110000
4059	00110110
405A	01001100
405B	00000000
405C	00000000
405D	11110001
405E	00000000
405F	00010000
4060	00000000
4061	00000100
4062	00110000
4063	00110000
4064	11100000
4065	01000000
4066	01111001
4067	00110000
4068	01000000
4069	01100100
406A	01010000
406B	00110000
406C	00111001
406D	11011100
406E	01000000
406F	01111001
4070	00101100
4071	00110000
4072	00110110
4073	00111000
4074	01000000
4075	01100100
4076	01001100
4077	00000000
4078	00000000
4079	00000101
[17bit049@mepcolinux ExNo5]$exit
exit
Script done on Thursday 19 September 2019 03:52:44 PM IST